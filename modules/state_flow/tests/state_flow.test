<?php

/**
 * Unit tests for the StateFlow revision state machine.
 */
class StateFlowUnitTest extends DrupalWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'StateFlow basic tests',
      'description' => 'Perform basic unit tests on the StateFlow revision state machine.',
      'group' => 'State Machine',
    );
  }

  function setup() {
    parent::setup('state_machine', 'state_flow');
  }

  /**
   * 
   */
  function testStateFlowStateMachine() {
    $node = $this->drupalCreateNode();
    $machine = state_flow_load_state_machine($node);

    $this->assertEqual($machine->get_current_state(), 'draft', t('New nodes should default to the "draft" state.'));

    $machine->fire_event('publish');
    $this->assertEqual($machine->get_current_state(), 'published', t('State should be "published" after firing the "publish" event.'));
    

    // $this->machine->fire_event('goto2');
    // $this->assertEqual($this->machine->get_current_state(), 'step2', t('Current state should change when a valid event is fired.'));
    // 
    // $this->machine->fire_event('goto2');
    // $this->assertEqual($this->machine->get_current_state(), 'step2', t('Event should not execute if current state is not valid for the specified event.'));
    // 
    // $this->machine->fire_event('reset');
    // $this->assertEqual($this->machine->get_current_state(), 'step1', t('Event should allow transitions from multiple origins.'));
    // 
    // $current = $this->machine->get_current_state();
    // $this->machine->fire_event('dont_do_it');
    // $this->assertEqual($current, $this->machine->get_current_state(), t('State should not change when guard function returns FALSE.'));
    // 
    // $this->machine->fire_event('reset');
    // $this->machine->reset_logs();
    // $this->machine->fire_event('goto2_with_logs');
    // 
    // $this->assertEqual($this->machine->logs[0], 'guard', t('The guard condition should be the first callback executed.'));
    // $this->assertEqual($this->machine->logs[1], 'before_transition', t('The before_transition callback should be the second callback executed.'));
    // $this->assertEqual($this->machine->logs[2], 'on_exit', t('The on_exit callback should be the third callback executed.'));
    // $this->assertEqual($this->machine->logs[3], 'on_enter', t('The on_enter callback should be the fourth callback executed.'));
    // $this->assertEqual($this->machine->logs[4], 'after_transition', t('The after_transition callback should be the fifth callback executed.'));
    // 
    // $this->machine->fire_event('reset');
    // $events = $this->machine->get_available_events();
    // $this->assertTrue(in_array('goto2', $events), t('The machine should return a list of available events.'));
    // $this->assertTrue(in_array('goto3', $events), t('The machine should return a list of available events.'));
  }

}
