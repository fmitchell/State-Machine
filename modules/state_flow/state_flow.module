<?php
/**
 * @file
 * A base implementation of the state machine class and its relationship to revisions
 */

require_once('inc/state_flow.inc');

/**
 * Implementation of hook_nodeapi
 *
 * @param object $node
 * @param string $op
 * @param string $a3
 * @param string $a4
 */
function state_flow_nodeapi(&$node, $op, $a3, $a4) {
  $type = $node->type;
  $node_types = array(
    'page',
    'program',
  );
  if(in_array($type, $node_types)) {
    switch ($op) {
      case 'insert':
        $state_flow = new StateFlow($node);
        $state_flow->persist();
        break;
      case 'update':
        $state_flow = new StateFlow($node);
        $state_flow->persist();
        state_flow_prevent_live_revision($node->nid);
        break;
      case 'delete':
        db_query('DELETE FROM {node_revision_states} WHERE nid = %d', $node->nid);
        break;
    }
  }
}

/**
 * Implementation of hook_menu_alter
 * Change the edit link so the most recent revision is always edited
 *
 * @param array $items
 */
function state_flow_menu_alter(&$items) {
  $items['node/%node/edit']['page callback'] = 'state_flow_node_edit';
}

/**
 * Helper function to to load the lastest revision on node edit
 *
 * @param object $node
 */
function state_flow_node_edit($node) {
  $state_flow = new StateFlow($node);
  $vid = $state_flow->get_latest_revision($node->nid);

  //Load the latest revision if it doesn't match what is part of the node
  if($node->vid != $vid) {
    $node = node_load($node->nid, $vid);
  }

  return node_page_edit($node);
}

function state_flow_prevent_live_revision($nid) {
  /**
   * Borrowed concept from content_moderation module
   * Check our table for published vid
   * If exists, update node table with that vid (join node_revision table to grab title, timestamp)
   */
  $revision_state = state_flow_live_revision($node->nid);

  if($revision_state != NULL) {
    /* Reset the title.
    if($node->new_title !== false) {
      db_query("UPDATE {node_revisions} SET title='%s' WHERE vid=%d",$node->new_title, $node->vid);
    }
    */

    // Reset the revision
    $live_version = state_flow_revision_info($revision_state['vid']);
    db_query("UPDATE {node} SET vid = %d, changed = '%s', title = '%s' WHERE nid = %d", $live_version->vid, $live_version->timestamp, $live_version->title, $node->nid);
  }
}

function state_flow_live_revision($nid) {
  $state = 'published';
  $query = "SELECT *
            FROM {node_revision_states}
            WHERE nid = %d AND state = '%s'
            ORDER BY timestamp
            DESC
            LIMIT 1";
  $revision_state = db_fetch_array(db_query($query, $nid));

  return $revision_state;
}

function state_flow_revision_info($vid) {
  $result = db_query('SELECT * FROM {node_revisions} WHERE vid = %d',$vid);
  return db_fetch_object($result);
}